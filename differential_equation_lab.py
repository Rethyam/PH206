# -*- coding: utf-8 -*-
"""Differential_Equation_Lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L78XVLizhXJwO_Cg7fHprfb_rZo3ZY9T
"""

#Euler's Method for 8 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 8
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Euler's Method for 16 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 16
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Euler's Method for 40 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 40
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Euler's Method for 80 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 80
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Mid-Point Method for 8 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 8
h = (b-a)/N
IV = (0.0,1)
def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):              
   w[i] = w[i-1] + h * f( t[i-1] + h/2.0, w[i-1] + h * f( t[i-1], w[i-1] ) / 2.0 )
   print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Mid-Point Method for 16 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 16
h = (b-a)/N
IV = (0.0,1)
def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):              
   w[i] = w[i-1] + h * f( t[i-1] + h/2.0, w[i-1] + h * f( t[i-1], w[i-1] ) / 2.0 )
   print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Mid-Point Method for 40 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 40
h = (b-a)/N
IV = (0.0,1)
def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):              
   w[i] = w[i-1] + h * f( t[i-1] + h/2.0, w[i-1] + h * f( t[i-1], w[i-1] ) / 2.0 )
   print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Mid-Point Method for 80 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 80
h = (b-a)/N
IV = (0.0,1)
def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):              
   w[i] = w[i-1] + h * f( t[i-1] + h/2.0, w[i-1] + h * f( t[i-1], w[i-1] ) / 2.0 )
   print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Heun's Method for 8 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 8
h = (b-a)/N
IV = (0.0,1)

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w[i-1] + (2.0/3.0) * h * f1 )
    w[i] = w[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Heun's Method for 16 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 16
h = (b-a)/N
IV = (0.0,1)

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w[i-1] + (2.0/3.0) * h * f1 )
    w[i] = w[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Heun's Method for 40 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 40
h = (b-a)/N
IV = (0.0,1)

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w[i-1] + (2.0/3.0) * h * f1 )
    w[i] = w[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Heun's Method for 80 Steps

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 80
h = (b-a)/N
IV = (0.0,1)

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w = np.zeros((N+1,))                
t[0], w[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w[i-1] + (2.0/3.0) * h * f1 )
    w[i] = w[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0
    print("{}".format(w[i]))

plt.scatter(t,w)    
plt.show()

#Comparison for 8 Steps Between Euler's, Middle Point and Heun's

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 8
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w1 = np.zeros((N+1,))                
t[0], w1[0] = IV                     
    
for i in range(1,N+1):              
   w1[i] = w1[i-1] + h * f( t[i-1] + h/2.0, w1[i-1] + h * f( t[i-1], w1[i-1] ) / 2.0 )
   

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w2 = np.zeros((N+1,))                
t[0], w2[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w2[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w2[i-1] + (2.0/3.0) * h * f1 )
    w2[i] = w2[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0


plt.scatter(t,w,label='Eulers',color='r')
plt.scatter(t,w1,label='Middle-Point',color='b')  
plt.scatter(t,w2,label='Heuns',color='y') 
plt.title('Comparison')
plt.legend()
plt.show()

#Comparison for 16 Steps Between Euler's, Middle Point and Heun's

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 16
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w1 = np.zeros((N+1,))                
t[0], w1[0] = IV                     
    
for i in range(1,N+1):              
   w1[i] = w1[i-1] + h * f( t[i-1] + h/2.0, w1[i-1] + h * f( t[i-1], w1[i-1] ) / 2.0 )
   

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w2 = np.zeros((N+1,))                
t[0], w2[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w2[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w2[i-1] + (2.0/3.0) * h * f1 )
    w2[i] = w2[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0


plt.scatter(t,w,label='Eulers',color='r')
plt.scatter(t,w1,label='Middle-Point',color='b')  
plt.scatter(t,w2,label='Heuns',color='y') 
plt.title('Comparison')
plt.legend()
plt.show()

#Comparison for 40 Steps Between Euler's, Middle Point and Heun's

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 40
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w1 = np.zeros((N+1,))                
t[0], w1[0] = IV                     
    
for i in range(1,N+1):              
   w1[i] = w1[i-1] + h * f( t[i-1] + h/2.0, w1[i-1] + h * f( t[i-1], w1[i-1] ) / 2.0 )
   

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w2 = np.zeros((N+1,))                
t[0], w2[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w2[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w2[i-1] + (2.0/3.0) * h * f1 )
    w2[i] = w2[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0


plt.scatter(t,w,label='Eulers',color='r')
plt.scatter(t,w1,label='Middle-Point',color='b')  
plt.scatter(t,w2,label='Heuns',color='y') 
plt.title('Comparison')
plt.legend()
plt.show()

#Comparison for 80 Steps Between Euler's, Middle Point and Heun's

import numpy as np
import matplotlib.pyplot as plt
a = 0.0
b = 4.0
N = 80
h = (b-a)/N
IV = (0.0,1)
 
def f( t, y ):
    return -2*t**3 + 12*t**2 - 20*t + 8.5 
t = np.arange( a, b+h, h )
w = np.zeros((N+1,)) 
t[0], w[0] = IV
 
for i in range(1,N+1):
    w[i] = w[i-1] + h * f( t[i-1], w[i-1] )
    

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                      
t = np.arange( a, b+h, h )          
w1 = np.zeros((N+1,))                
t[0], w1[0] = IV                     
    
for i in range(1,N+1):              
   w1[i] = w1[i-1] + h * f( t[i-1] + h/2.0, w1[i-1] + h * f( t[i-1], w1[i-1] ) / 2.0 )
   

def f( t,y ):
  return -2*t**3 + 12*t**2 - 20*t + 8.5                    
t = np.arange( a, b+h, h )          
w2 = np.zeros((N+1,))                
t[0], w2[0] = IV                     
    
for i in range(1,N+1):             
    f1 = f( t[i-1], w2[i-1] )
    f2 = f( t[i-1] + (2.0/3.0) * h, w2[i-1] + (2.0/3.0) * h * f1 )
    w2[i] = w2[i-1] + h * ( f1 + 3.0 * f2 ) / 4.0


plt.scatter(t,w,label='Eulers',color='r')
plt.scatter(t,w1,label='Middle-Point',color='b')  
plt.scatter(t,w2,label='Heuns',color='y') 
plt.title('Comparison')
plt.legend()
plt.show()
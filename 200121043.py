# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TE4T3xUzJ949KWr3XQMb_F5KPgH6nm2_
"""

import numpy as np
import matplotlib.pyplot as plt

#RK-4 vs Exact vs Euler

def g(x) :
  return(-x)

n = 500
x = [0.0 for i in range(n)]
y = [0.0 for i in range(n)]
t = [0.0 for i in range(n)]
v1 = [0.0 for i in range(n)]
v2 = [0.0 for i in range(n)]
x[0] = 1
y[0] = 1
v1[0] = 0
v2[0] = 0
t[0] = 0
h = 0.1

for i in range (0,n-1):
  k1 = h * (v1[i])
  l1 = h * g(x[i])
  k2 = h * (v1[i]+(l1/2))
  l2 = h * g(x[i]+k1/2)
  k3 = h * (v1[i]+(l2/2))
  l3 = h * g(x[i]+k2/2)
  k4 = h * (v1[i]+l3)
  l4 = h * g(x[i]+k3)
  x[i+1] = x[i] + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)
  
  v1[i+1] = v1[i] + (1.0 / 6.0)*(l1 + 2 * l2 + 2 * l3 + l4)
  
  t[i+1] = t[i] + h

k = 1
m = 1
q_max = 50.0
no_of_iterations=1000
dq = q_max/no_of_iterations
q = np.zeros(no_of_iterations)
r = np.zeros(no_of_iterations)
v = np.zeros(no_of_iterations)
q[0] = 0
r[0] = 1
v[0] = 0

for i in range(1,no_of_iterations):
    q[i] = dq * i
    v[i] = v[i-1] - dq *k/m*r[i-1]
    r[i] = r[i-1] + dq * v[i-1]   

z = np.arange(0,50,0.1)
y = np.cos(z)  

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Comparison')
plt.plot(z,y,color='Black',label='Exact Solution')
plt.scatter(t,x,color='Blue',label='Ranga Kutta')
plt.plot(q,r,color='Purple',label='Euler')
plt.legend()
plt.show()

#RK-4 vs Euler

def g(x) :
  return(-x)

n = 500
x = [0.0 for i in range(n)]
y = [0.0 for i in range(n)]
t = [0.0 for i in range(n)]
v1 = [0.0 for i in range(n)]
v2 = [0.0 for i in range(n)]
x[0] = 1
y[0] = 1
v1[0] = 0
v2[0] = 0
t[0] = 0
h = 0.1

for i in range (0,n-1):
  k1 = h * (v1[i])
  l1 = h * g(x[i])
  k2 = h * (v1[i]+(l1/2))
  l2 = h * g(x[i]+k1/2)
  k3 = h * (v1[i]+(l2/2))
  l3 = h * g(x[i]+k2/2)
  k4 = h * (v1[i]+l3)
  l4 = h * g(x[i]+k3)
  x[i+1] = x[i] + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)
  v1[i+1] = v1[i] + (1.0 / 6.0)*(l1 + 2 * l2 + 2 * l3 + l4)  
  t[i+1] = t[i] + h

k = 1
m = 1
q_max = 50.0
no_of_iterations=1000
dq = q_max/no_of_iterations
q = np.zeros(no_of_iterations)
r = np.zeros(no_of_iterations)
v = np.zeros(no_of_iterations)
q[0] = 0
r[0] = 1
v[0] = 0

for i in range(1,no_of_iterations):
    q[i] = dq * i
    v[i] = v[i-1] - dq *k/m*r[i-1]
    r[i] = r[i-1] + dq * v[i-1]

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Comparison')  
plt.scatter(t,x,color='Blue',label='Ranga Kutta')
plt.plot(q,r,color='Purple',label='Euler')
plt.legend()
plt.show()

#RK-4 vs Exact

def g(x) :
  return(-x)

n = 500
x = [0.0 for i in range(n)]
y = [0.0 for i in range(n)]
t = [0.0 for i in range(n)]
v1 = [0.0 for i in range(n)]
v2 = [0.0 for i in range(n)]
x[0] = 1
y[0] = 1
v1[0] = 0
v2[0] = 0
t[0] = 0
h = 0.1

for i in range (0,n-1):

  k1 = h * (v1[i])
  l1 = h * g(x[i])
  k2 = h * (v1[i]+(l1/2))
  l2 = h * g(x[i]+k1/2)
  k3 = h * (v1[i]+(l2/2))
  l3 = h * g(x[i]+k2/2)
  k4 = h * (v1[i]+l3)
  l4 = h * g(x[i]+k3)
  x[i+1] = x[i] + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)
  
  v1[i+1] = v1[i] + (1.0 / 6.0)*(l1 + 2 * l2 + 2 * l3 + l4)
  
  t[i+1] = t[i] + h

z = np.arange(0,50,0.1)
y = np.cos(z)  

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Comparison')  
plt.plot(z,y,color='Black',label='Exact Solution')
plt.scatter(t,x,color='Blue',label='Ranga Kutta')
plt.legend()
plt.show()

#Exact

z = np.arange(0,50,0.1)
y = np.cos(z)

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Exact Solution')
plt.plot(z,y,color='Red',label='Exact Solution')
plt.show()

#RK-4

def g(x) :
  return(-x)

n = 500
x = [0.0 for i in range(n)]
y = [0.0 for i in range(n)]
t = [0.0 for i in range(n)]
v1 = [0.0 for i in range(n)]
v2 = [0.0 for i in range(n)]
x[0] = 1
y[0] = 1
v1[0] = 0
v2[0] = 0
t[0] = 0
h = 0.1

for i in range (0,n-1):

  k1 = h * (v1[i])
  l1 = h * g(x[i])
  k2 = h * (v1[i]+(l1/2))
  l2 = h * g(x[i]+k1/2)
  k3 = h * (v1[i]+(l2/2))
  l3 = h * g(x[i]+k2/2)
  k4 = h * (v1[i]+l3)
  l4 = h * g(x[i]+k3)
  x[i+1] = x[i] + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4) 
  v1[i+1] = v1[i] + (1.0 / 6.0)*(l1 + 2 * l2 + 2 * l3 + l4)  
  t[i+1] = t[i] + h

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Ranga Kutta') 
plt.scatter(t,x,color='Blue',label='Ranga Kutta') 
plt.show()

#Euler

k = 1
m = 1
q_max = 50.0
no_of_iterations=1000
dq = q_max/no_of_iterations
q = np.zeros(no_of_iterations)
r = np.zeros(no_of_iterations)
v = np.zeros(no_of_iterations)
q[0] = 0
r[0] = 1
v[0] = 0

for i in range(1,no_of_iterations):
    q[i] = dq * i
    v[i] = v[i-1] - dq *k/m*r[i-1]
    r[i] = r[i-1] + dq * v[i-1]

plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('Euler')  
plt.plot(q,r,color='Purple',label='Euler') 
plt.show()